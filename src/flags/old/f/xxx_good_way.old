/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   good_way.c                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: kcharla <kcharla@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2020/01/23 01:02:14 by kcharla           #+#    #+#             */
/*   Updated: 2020/01/31 12:16:53 by kcharla          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

//clang src/flags/f/good_way.c -I libft/includes -I includes libft/libft.a

#include "printf.h"

char * add_to_div(char * res, char * additive)
{
	int i = 0;
	int tmp = 0;

	while (additive[i] != 0)
		i++;
	i--;
	//write(1, "lol", 3);
	while (i >= 0)
	{
		//write(1, "kek\n", 4);
		tmp =  tmp + '0' * (res[i] < '0' || res[i] > '9') + (res[i] - '0') + (additive[i] - '0');
		res[i] = (tmp % 10) + '0';
		tmp /= 10;
		i--;
	}
	return (res);
}

char * divide_by_two(char * res)
{
	if (res == NULL)
		return (NULL);
	int tmp = 0;
	int i = 0;
	while (res[i] != 0)
	{
		tmp = tmp + (res[i] - '0');
		res[i] = (tmp / 2) + '0';
		tmp = (tmp % 2) * 10;
		i++;
	}
	if (tmp != 0)
		res[i] = (tmp / 2) + '0';
	return (res);
}

char * ft_after_dot(void *pointer_v, size_t count)
{
	if (pointer_v == NULL)
		return (NULL);


	unsigned char * pointer = (unsigned char *)pointer_v;

	char * res = ft_str_spam("0", count * 8);
	res[0] = '0';
	char * add = ft_str_spam("0", count * 8);
	add[0] = '5';

	int exp = 0;
	int i = 0;
	while (i < count)
	{

		int j = 0;
		while (j < 8)
		{
			if (((pointer[i] >> j) & 00000001) == 00000001)
			{
				add_to_div(res, add);
			}
			divide_by_two(add);
			exp++;
			j++;
		}
		i++;
	}
	return (res);
}


//TODO return codes for malloc
char *		ldouble_from_bits(long double num)
{
	union ldouble_10_u parser;
	int exp;
	unsigned long long mcopy;

	parser.num = num;
	exp = 1 + parser.parts.exponent - 16383;

	//unsigned long long mcopy = 0;




	char * ad_toa;

	if (exp > 64)
	{
		ad_toa = ft_strdup("000000");
	}
	else if (exp >= 0)
	{
		mcopy = (parser.parts.mantissa << exp);
		ft_mem_rev(&mcopy, 8);
		ad_toa = ft_after_dot(&mcopy, 8);
	}
	else
	{
		unsigned char first_bit = (parser.bytes.byte7);
		first_bit = first_bit >> ((-exp) % 8);
		mcopy = (parser.parts.mantissa);
		mcopy = mcopy << (8 - (-exp) % 8);

		char * after_dot_bits = ft_strnew((-exp) / 8 + 9);

		ft_memcpy(&(after_dot_bits[0]), &mcopy, 8);
		ft_memcpy(&(after_dot_bits[8]), &first_bit, 1);
		ft_mem_rev(after_dot_bits, (-exp) / 8 + 9);
		ad_toa = ft_after_dot(after_dot_bits, ((-exp) / 8 + 9));
	}
//	printf("-----------------------\n");
//	printf("                                 %.80Lf\n", num);
//
//	printf("bd_toa: \'%s\'\n", bd_toa);
//	printf("ad_toa : \'%s\'\n", ad_toa);
//	printf("-----------------------\n");
	return (ad_toa);
}

int main()
{
	//to_plain_bits(1.333L * 1000000000L * 10000000000L * 10000000000L * 1000000L);
	char * a;
	char * b;
	//123.000032434L;// 0.000032434L; //LDBL_MAX;  //
	long double num =  123.000032434L;// * 1234567890L * 10000000000L * 10000000000L * 10000000L * 1000000000L * 10000000000L * 10000000000L * 333L * 100000000L * 10000000000L * 10000000000L;

	a = ldouble_from_bits(num);

	int flags[] = {1, 2, 3, 4, 5};

	b = ft_before_dot(flags, num);
	printf("%.20Lf\n", num);
	printf("%.23Lf\n", num);
	printf("%.24Lf\n", num);
	printf("%.25Lf\n", num);
	printf("%.80Lf\n", num);
	printf("%s.%s\n", b, a);


	free(a);
	free(b);
	//to_plain_bits(LDBL_MAX);
	//to_plain_bits(LDBL_MIN);
	//to_plain_bits(1.33333333333333333333333L * 100000L * 1000000L * 10000L);
	//to_plain_bits(0.00001L);
//	to_plain_bits(-1.3245562537265L);

//	int a = 1767468123;
//	printf("btoa: \'%s\'\n", ft_btoa(&a, 4));
//	printf("btoa: \'%s\'\n", ft_strrev(ft_btoa(&a, 4)));
	//printf("sizeof long long: %lu\n", sizeof(unsigned long long));
	//printf("sizeof long double: %lu\n", sizeof(long double));
}
